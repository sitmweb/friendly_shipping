---
http_interactions:
- request:
    method: get
    uri: https://api.shipengine.com/v1/carriers
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept:
      - "*/*"
      User-Agent:
      - rest-client/2.1.0 (darwin18.5.0 x86_64) ruby/2.6.5p114
      Content-Type:
      - application/json
      Api-Key:
      - "%SHIPENGINE_API_KEY%"
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Host:
      - api.shipengine.com
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Wed, 18 Aug 2021 15:42:29 GMT
      Content-Type:
      - application/json; charset=utf-8
      Content-Length:
      - '23077'
      Connection:
      - keep-alive
      X-Shipengine-Requestid:
      - c8498c49-35e4-41d6-b8e6-58af8f6cfc30
      Vary:
      - Origin
      Access-Control-Allow-Origin:
      - https://www.shipengine.com
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version:
  recorded_at: Wed, 18 Aug 2021 15:42:30 GMT
- request:
    method: post
    uri: https://api.shipengine.com/v1/rates/estimate
    body:
      encoding: UTF-8
      string: '{"carrier_ids":["se-725893"],"from_country_code":"US","from_postal_code":"78756","to_country_code":"US","to_postal_code":"91521","to_city_locality":"Herndon","to_state_province":"IL","weight":{"value":99.47949521284937,"unit":"pound"},"confirmation":"none","address_residential_indicator":"no"}'
    headers:
      Accept:
      - "*/*"
      User-Agent:
      - rest-client/2.1.0 (darwin18.5.0 x86_64) ruby/2.6.5p114
      Content-Type:
      - application/json
      Api-Key:
      - "%SHIPENGINE_API_KEY%"
      Content-Length:
      - '294'
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Host:
      - api.shipengine.com
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Wed, 18 Aug 2021 15:42:31 GMT
      Content-Type:
      - application/json; charset=utf-8
      Content-Length:
      - '877'
      Connection:
      - keep-alive
      X-Shipengine-Requestid:
      - 6dda9b94-3134-494b-8fc5-2fcb22da8d3e
      Vary:
      - Origin
      Access-Control-Allow-Origin:
      - https://www.shipengine.com
    body:
      encoding: UTF-8
      string: "[\r\n  {\r\n    \"rate_type\": \"check\",\r\n    \"carrier_id\": \"se-725893\",\r\n
        \   \"shipping_amount\": null,\r\n    \"insurance_amount\": null,\r\n    \"confirmation_amount\":
        null,\r\n    \"other_amount\": null,\r\n    \"zone\": null,\r\n    \"package_type\":
        null,\r\n    \"delivery_days\": null,\r\n    \"guaranteed_service\": false,\r\n
        \   \"estimated_delivery_date\": null,\r\n    \"carrier_delivery_days\": null,\r\n
        \   \"ship_date\": null,\r\n    \"negotiated_rate\": false,\r\n    \"service_type\":
        null,\r\n    \"service_code\": null,\r\n    \"trackable\": false,\r\n    \"carrier_code\":
        \"endicia\",\r\n    \"carrier_nickname\": null,\r\n    \"carrier_friendly_name\":
        \"Endicia\",\r\n    \"validation_status\": \"invalid\",\r\n    \"warning_messages\":
        [],\r\n    \"error_messages\": [\r\n      \"Error calculating rates for one
        or more mail classes: There are no rates available for the package information
        provided. Error encountered (Log ID: 33439)\"\r\n    ]\r\n  }\r\n]"
    http_version:
  recorded_at: Wed, 18 Aug 2021 15:42:31 GMT
recorded_with: VCR 5.1.0
